edition: 1.0.0          #  命令行YAML规范版本，遵循语义化版本（Semantic Versioning）规范
name: framework         #  项目名称
# access 是当前应用所需要的密钥信息配置：
# 密钥配置可以参考：https://www.serverless-devs.com/serverless-devs/command/config
# 密钥使用顺序可以参考：https://www.serverless-devs.com/serverless-devs/tool#密钥使用顺序与规范
access: "{{ access }}"


vars:
  region: "cn-beijing" 
  service:
    name: "test-bison"
    description: 'bison main site'
    nasConfig: auto
  service_env: ${env(service_env)}
  service_domain: ${env(service_domain)}
  ssl_enabled: ${env(ssl_enabled)}
  cert_id: ${env(cert_id)}

services:
  netty-websocket-server: # 业务名称/模块名称
    component:  fc    # 组件名称，Serverless Devs 工具本身类似于一种游戏机，不具备具体的业务能力，组件类似于游戏卡，用户通过向游戏机中插入不同的游戏卡实现不同的功能，即通过使用不同的组件实现不同的具体业务能力
    actions:          # 自定义执行逻辑，关于actions 的使用，可以参考：https://www.serverless-devs.com/serverless-devs/yaml#行为描述
      pre-deploy:
        - run: set +e && echo "start deploy netty-websocket on ${netty-websocket-server.output.url.custom_domain[0].domain}"
          path: .
      post-deploy:  # 在deploy之前运行
        - run: set +e && echo 'test accessable'
          path: .
        - run: set +e && echo 'load biz modules'
          path: .
       # - component: fc invoke --region cn-beijing --service-name netty-websocket-server --function-name netty-websocket-api httpTrigger
    props: # 组件的属性值
      region: ${vars.region}
      service: ${vars.service}
      function:
        name: "netty-websocket-api"
        description: 'netty websocket api'
        version: 'LATEST'
        codeUri: '.'
        runtime: custom-container
        timeout: 7200
        caPort: 443
        customContainerConfig: 
          image: "registry.cn-beijing.aliyuncs.com/dbsnolimit/netty-websocket:latest"
        environmentVariables:
          ssl_enabled: ${vars.ssl_enabled}
        cpu: 0.5
        memorySize: 512 # 单位MB
        diskSize: 512 # 单位MB
        instanceConcurrency: 200
        prewarmedInstance:
          enabled: true # 启用预留实例  
          minimumInstances: 0
          maximumInstances: 1
        logConfig:
          project: 'serverless-log'
          logstore: 'netty-websocket-api'
      triggers:
        - name: httpTrigger
          type: http
          config:
            authType: anonymous
            methods:
              - GET
              - POST
              - PUT
              - DELETE
              - HEAD
              - OPTIONS
  bison-main-site-html: # 业务名称/模块名称
    component:  fc    # 组件名称，Serverless Devs 工具本身类似于一种游戏机，不具备具体的业务能力，组件类似于游戏卡，用户通过向游戏机中插入不同的游戏卡实现不同的功能，即通过使用不同的组件实现不同的具体业务能力
    actions:          # 自定义执行逻辑，关于actions 的使用，可以参考：https://www.serverless-devs.com/serverless-devs/yaml#行为描述
      pre-deploy:
        - run: npm install -g typescript && npm install && sh compile.sh
          path: bison-main-site-html
    props: # 组件的属性值
      region: ${vars.region}
      service: ${vars.service}
      function:
        name: "bison-main-site-html"
        description: 'main site html'
        version: 'LATEST'
        runtime: nodejs16 # 根据您的需求选择合适的运行时环境  
        handler: index.handler # 根据您的函数代码进行调整  
        codeUri: ./bison-main-site-html # 代码包的相对路径，根据您的实际情况进行调整  
        timeout: 60 # 根据您的需求调整超时时间  
        caPort: 443 # 根据您的需求调整自定义端口号
        cpu: 0.1
        memorySize: 128 # 单位MB
        diskSize: 512 # 单位MB
        instanceConcurrency: 200
        prewarmedInstance:
          enabled: true # 启用预留实例  
          minimumInstances: 1
          maximumInstances: 1
        logConfig:
          project: 'serverless-log'
          logstore: 'bison-main-site-html'
      customDomains:
        - domainName: ${vars.service_domain}
          protocol: HTTP,HTTPS
          certId: ${vars.cert_id}
          routeConfigs:
            - path: /${vars.service_env}/api/*
              serviceName: test-bison
              functionName: netty-websocket-api
              qualifier: LATEST
              rewriteConfig:
                # equalRules:
                #   - match: /equalRules
                #     replacement: /xxxx
                # regexRules:
                #   - match: ^/old/[a-z]+/
                #     replacement: /xxxx
                wildcardRules:
                  - match: /${vars.service_env}/api/*
                    replacement: /$1
            - path: /${vars.service_env}/*
              serviceName: test-bison
              functionName: bison-main-site-html
              qualifier: LATEST
              rewriteConfig:
                wildcardRules:
                  - match: /${vars.service_env}/*
                    replacement: /$1
      triggers:
        - name: httpTrigger
          type: http
          config:
            authType: anonymous
            methods:
              - GET
              - POST
              - PUT
              - DELETE
              - HEAD
              - OPTIONS
